// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 17.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace VitalConnection.AAL.Builder.IndesignExport
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\MikeProjects\AAL\AAL-Constructor\AdAndLifeNewspaperConstructor\AdAndLifeNewspaperConstructor\AdAndLifeNewspaperConstructor\IndesignExport\AdAndLifeInDesignScript.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    public partial class AdAndLifeInDesignScript : AdAndLifeInDesignScriptBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("\r\nSet myInDesign = CreateObject(\"InDesign.Application\")\r\nSet myDocument = myInDes" +
                    "ign.Open(\"");
            
            #line 8 "C:\MikeProjects\AAL\AAL-Constructor\AdAndLifeNewspaperConstructor\AdAndLifeNewspaperConstructor\AdAndLifeNewspaperConstructor\IndesignExport\AdAndLifeInDesignScript.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TemplateLocation));
            
            #line default
            #line hidden
            this.Write("\")\r\nmyDocument.Layers(1).Visible = myDocument.Layers(1).Visible\r\n   \r\nIf myDocume" +
                    "nt.Pages.Count < ");
            
            #line 11 "C:\MikeProjects\AAL\AAL-Constructor\AdAndLifeNewspaperConstructor\AdAndLifeNewspaperConstructor\AdAndLifeNewspaperConstructor\IndesignExport\AdAndLifeInDesignScript.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(PageCount));
            
            #line default
            #line hidden
            this.Write(" Then\r\n   For p = 1 To ");
            
            #line 12 "C:\MikeProjects\AAL\AAL-Constructor\AdAndLifeNewspaperConstructor\AdAndLifeNewspaperConstructor\AdAndLifeNewspaperConstructor\IndesignExport\AdAndLifeInDesignScript.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(PageCount));
            
            #line default
            #line hidden
            this.Write(@" - myDocument.Pages.Count
	   Set newPage = myDocument.Pages.Add(idBefore, myDocument.Pages.LastItem)
	   newPage.AppliedMaster = myDocument.MasterSpreads(""M-Main"")
   Next 
End If

myDocument.Layers.Item(""modulesLayer"").Delete
Set modulesLayer = myDocument.Layers.Add
modulesLayer.Name = ""modulesLayer""

' ====== PLACE ADS ======

    ");
            
            #line 24 "C:\MikeProjects\AAL\AAL-Constructor\AdAndLifeNewspaperConstructor\AdAndLifeNewspaperConstructor\AdAndLifeNewspaperConstructor\IndesignExport\AdAndLifeInDesignScript.tt"
 
	var pageNum = 0;
	double classifiedColumnWidth = 0;
	foreach (var p in Issue.Pages)
       { 
		   pageNum++;

            
            #line default
            #line hidden
            this.Write("\r\n\tSet myPage = myDocument.Pages.Item(");
            
            #line 32 "C:\MikeProjects\AAL\AAL-Constructor\AdAndLifeNewspaperConstructor\AdAndLifeNewspaperConstructor\AdAndLifeNewspaperConstructor\IndesignExport\AdAndLifeInDesignScript.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(pageNum));
            
            #line default
            #line hidden
            this.Write(")\r\n\r\n");
            
            #line 34 "C:\MikeProjects\AAL\AAL-Constructor\AdAndLifeNewspaperConstructor\AdAndLifeNewspaperConstructor\AdAndLifeNewspaperConstructor\IndesignExport\AdAndLifeInDesignScript.tt"

		   var pg = new PageGridGeometry(p);

           foreach (var ad in p.AdModules)
           {
			   var ph = Utility.ConvertFilePath(ad.AdModule.FullPath);
			   if (ph == null) continue;
			   if (!System.IO.File.Exists(ph)) continue;

			   var y0 = pg.GetY(ad.Y);
			   var x0 = pg.GetX(ad.X);
			   var y1 = y0 + pg.GetHeight(ad.AdModule.Height);
			   var x1 = x0 + pg.GetWidth(ad.AdModule.Width);
			   var gap = pg.Gap;
		   
            
            #line default
            #line hidden
            this.Write("\t\t \r\n\tSet myRectangle = myPage.Rectangles.Add\r\n\tmyRectangle.GeometricBounds = Arr" +
                    "ay(");
            
            #line 51 "C:\MikeProjects\AAL\AAL-Constructor\AdAndLifeNewspaperConstructor\AdAndLifeNewspaperConstructor\AdAndLifeNewspaperConstructor\IndesignExport\AdAndLifeInDesignScript.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(y0));
            
            #line default
            #line hidden
            this.Write(", ");
            
            #line 51 "C:\MikeProjects\AAL\AAL-Constructor\AdAndLifeNewspaperConstructor\AdAndLifeNewspaperConstructor\AdAndLifeNewspaperConstructor\IndesignExport\AdAndLifeInDesignScript.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(x0));
            
            #line default
            #line hidden
            this.Write(", ");
            
            #line 51 "C:\MikeProjects\AAL\AAL-Constructor\AdAndLifeNewspaperConstructor\AdAndLifeNewspaperConstructor\AdAndLifeNewspaperConstructor\IndesignExport\AdAndLifeInDesignScript.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(y1));
            
            #line default
            #line hidden
            this.Write(", ");
            
            #line 51 "C:\MikeProjects\AAL\AAL-Constructor\AdAndLifeNewspaperConstructor\AdAndLifeNewspaperConstructor\AdAndLifeNewspaperConstructor\IndesignExport\AdAndLifeInDesignScript.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(x1));
            
            #line default
            #line hidden
            this.Write(")\r\n\tmyRectangle.strokeWeight = 0\r\n\tmyRectangle.strokeColor = myDocument.Swatches." +
                    "Item(\"None\")\r\n    myRectangle.TextWrapPreferences.TextWrapMode = idBoundingBoxTe" +
                    "xtWrap\r\n    myRectangle.TextWrapPreferences.TextWrapOffset = Array(");
            
            #line 55 "C:\MikeProjects\AAL\AAL-Constructor\AdAndLifeNewspaperConstructor\AdAndLifeNewspaperConstructor\AdAndLifeNewspaperConstructor\IndesignExport\AdAndLifeInDesignScript.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(gap));
            
            #line default
            #line hidden
            this.Write(", ");
            
            #line 55 "C:\MikeProjects\AAL\AAL-Constructor\AdAndLifeNewspaperConstructor\AdAndLifeNewspaperConstructor\AdAndLifeNewspaperConstructor\IndesignExport\AdAndLifeInDesignScript.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(gap));
            
            #line default
            #line hidden
            this.Write(", ");
            
            #line 55 "C:\MikeProjects\AAL\AAL-Constructor\AdAndLifeNewspaperConstructor\AdAndLifeNewspaperConstructor\AdAndLifeNewspaperConstructor\IndesignExport\AdAndLifeInDesignScript.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(gap));
            
            #line default
            #line hidden
            this.Write(", ");
            
            #line 55 "C:\MikeProjects\AAL\AAL-Constructor\AdAndLifeNewspaperConstructor\AdAndLifeNewspaperConstructor\AdAndLifeNewspaperConstructor\IndesignExport\AdAndLifeInDesignScript.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(gap));
            
            #line default
            #line hidden
            this.Write(")\r\n    myRectangle.ItemLayer =  myDocument.Layers.Item(\"modulesLayer\")\r\n\tmyRectan" +
                    "gle.place \"");
            
            #line 57 "C:\MikeProjects\AAL\AAL-Constructor\AdAndLifeNewspaperConstructor\AdAndLifeNewspaperConstructor\AdAndLifeNewspaperConstructor\IndesignExport\AdAndLifeInDesignScript.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ph));
            
            #line default
            #line hidden
            this.Write("\"\r\n\tmyRectangle.fit idFitOptions.idContentToFrame\r\n\r\n\t\t ");
            
            #line 60 "C:\MikeProjects\AAL\AAL-Constructor\AdAndLifeNewspaperConstructor\AdAndLifeNewspaperConstructor\AdAndLifeNewspaperConstructor\IndesignExport\AdAndLifeInDesignScript.tt"

           }
	   
 }  
            
            #line default
            #line hidden
            this.Write(@"

' ====== PREPARE CLASSIFIED FLOW ======


'Set classifiedLayer = myDocument.Layers.Item(""classifiedLayer"")
myDocument.Layers.Item(""classifiedLayer"").Delete
Set classifiedLayer = myDocument.Layers.Add
classifiedLayer.Name = ""classifiedLayer""


");
            
            #line 75 "C:\MikeProjects\AAL\AAL-Constructor\AdAndLifeNewspaperConstructor\AdAndLifeNewspaperConstructor\AdAndLifeNewspaperConstructor\IndesignExport\AdAndLifeInDesignScript.tt"
 
	var isFirst = true;
	pageNum = 0;
	foreach (var p in Issue.Pages)
       { 
		   pageNum++;
		   if (!p.Grid.IsForClassified) continue;
		   
            
            #line default
            #line hidden
            this.Write("\r\n\tSet myPage = myDocument.Pages.Item(");
            
            #line 84 "C:\MikeProjects\AAL\AAL-Constructor\AdAndLifeNewspaperConstructor\AdAndLifeNewspaperConstructor\AdAndLifeNewspaperConstructor\IndesignExport\AdAndLifeInDesignScript.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(pageNum));
            
            #line default
            #line hidden
            this.Write(")\r\n\r\n");
            
            #line 86 "C:\MikeProjects\AAL\AAL-Constructor\AdAndLifeNewspaperConstructor\AdAndLifeNewspaperConstructor\AdAndLifeNewspaperConstructor\IndesignExport\AdAndLifeInDesignScript.tt"


  		   var cg = new PageClassifiedGeometry(p);

		   classifiedColumnWidth = cg.FrameWidth; // use in filling classified

           for (int i = 0; i < p.Grid.ColumnsCount; i++)
           {

			   var y0 = cg.FrameTop;
			   var x0 = cg.GetFrameX(i);
			   var y1 = y0 + cg.FrameHeight;
			   var x1 = x0 + cg.FrameWidth;

		   
            
            #line default
            #line hidden
            this.Write("\r\n\r\nSet frm = myPage.TextFrames.Add\r\nWith frm\r\n\t.GeometricBounds = Array(");
            
            #line 105 "C:\MikeProjects\AAL\AAL-Constructor\AdAndLifeNewspaperConstructor\AdAndLifeNewspaperConstructor\AdAndLifeNewspaperConstructor\IndesignExport\AdAndLifeInDesignScript.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(y0));
            
            #line default
            #line hidden
            this.Write(", ");
            
            #line 105 "C:\MikeProjects\AAL\AAL-Constructor\AdAndLifeNewspaperConstructor\AdAndLifeNewspaperConstructor\AdAndLifeNewspaperConstructor\IndesignExport\AdAndLifeInDesignScript.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(x0));
            
            #line default
            #line hidden
            this.Write(", ");
            
            #line 105 "C:\MikeProjects\AAL\AAL-Constructor\AdAndLifeNewspaperConstructor\AdAndLifeNewspaperConstructor\AdAndLifeNewspaperConstructor\IndesignExport\AdAndLifeInDesignScript.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(y1));
            
            #line default
            #line hidden
            this.Write(", ");
            
            #line 105 "C:\MikeProjects\AAL\AAL-Constructor\AdAndLifeNewspaperConstructor\AdAndLifeNewspaperConstructor\AdAndLifeNewspaperConstructor\IndesignExport\AdAndLifeInDesignScript.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(x1));
            
            #line default
            #line hidden
            this.Write(")\r\n\t.strokeWeight = 0\r\n\t.strokeColor = myDocument.Swatches.Item(\"None\")\r\n\t.ItemLa" +
                    "yer = classifiedLayer\r\n\t.TextFramePreferences.VerticalJustification = idJustifyA" +
                    "lign\r\n\t");
            
            #line 110 "C:\MikeProjects\AAL\AAL-Constructor\AdAndLifeNewspaperConstructor\AdAndLifeNewspaperConstructor\AdAndLifeNewspaperConstructor\IndesignExport\AdAndLifeInDesignScript.tt"
 if (!isFirst) { 
            
            #line default
            #line hidden
            this.Write("\t\r\n\tfrm.PreviousTextFrame = frmPrev \r\n\t");
            
            #line 112 "C:\MikeProjects\AAL\AAL-Constructor\AdAndLifeNewspaperConstructor\AdAndLifeNewspaperConstructor\AdAndLifeNewspaperConstructor\IndesignExport\AdAndLifeInDesignScript.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\tSet frmPrev = frm\r\nEnd With\r\n\r\n\r\n\t\t   ");
            
            #line 117 "C:\MikeProjects\AAL\AAL-Constructor\AdAndLifeNewspaperConstructor\AdAndLifeNewspaperConstructor\AdAndLifeNewspaperConstructor\IndesignExport\AdAndLifeInDesignScript.tt"

		   isFirst = false;
           }


            
            #line default
            #line hidden
            this.Write("\r\n\r\n");
            
            #line 124 "C:\MikeProjects\AAL\AAL-Constructor\AdAndLifeNewspaperConstructor\AdAndLifeNewspaperConstructor\AdAndLifeNewspaperConstructor\IndesignExport\AdAndLifeInDesignScript.tt"

    }

            
            #line default
            #line hidden
            this.Write(@"
   Set flowStory = frm.ParentStory
   flowStory.Label = ""flowStory""
   flowStory.StoryPreferences.OpticalMarginAlignment = True

' ====== FILL CLASSIFIED ======

   Set strStyle = myDocument.StrokeStyles.ItemByID(23097)

   With flowStory.InsertionPoints.LastItem
      .ClearOverrides
      .AppliedParagraphStyle = ""__classifiedText""
      .Contents = Chr(13) & Chr(13)
   End With

");
            
            #line 142 "C:\MikeProjects\AAL\AAL-Constructor\AdAndLifeNewspaperConstructor\AdAndLifeNewspaperConstructor\AdAndLifeNewspaperConstructor\IndesignExport\AdAndLifeInDesignScript.tt"
	
	   int currRubricId = -1;
	   bool toDrawLine = false;
       foreach (var cl in Classified)
       {
		   
            
            #line default
            #line hidden
            this.Write("\r\n\tSet curParagraph = flowStory.Paragraphs(flowStory.Paragraphs.Count - 1)\r\n\r\n\t\t " +
                    "  ");
            
            #line 151 "C:\MikeProjects\AAL\AAL-Constructor\AdAndLifeNewspaperConstructor\AdAndLifeNewspaperConstructor\AdAndLifeNewspaperConstructor\IndesignExport\AdAndLifeInDesignScript.tt"

			var txt = GetClassifiedText(cl);
			if (cl.Rubric.Id != currRubricId) {
				// insert rubric picture
				var rubImgFn = Utility.ConvertFilePath(cl.Rubric.ImageFilename);

				
            
            #line default
            #line hidden
            this.Write("\r\n\t\' NEW RUBRIC\r\n\tcurParagraph.place \"");
            
            #line 160 "C:\MikeProjects\AAL\AAL-Constructor\AdAndLifeNewspaperConstructor\AdAndLifeNewspaperConstructor\AdAndLifeNewspaperConstructor\IndesignExport\AdAndLifeInDesignScript.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(rubImgFn));
            
            #line default
            #line hidden
            this.Write("\"\r\n\tcurParagraph.Contents = curParagraph.Contents & Chr(13) & Chr(13)\r\n    Set cu" +
                    "rParagraph = flowStory.Paragraphs(flowStory.Paragraphs.Count - 1)\r\n\r\n\t\t\t\t");
            
            #line 164 "C:\MikeProjects\AAL\AAL-Constructor\AdAndLifeNewspaperConstructor\AdAndLifeNewspaperConstructor\AdAndLifeNewspaperConstructor\IndesignExport\AdAndLifeInDesignScript.tt"

				currRubricId = cl.Rubric.Id;
            }

			
            
            #line default
            #line hidden
            this.Write("\r\n\t\t\t");
            
            #line 170 "C:\MikeProjects\AAL\AAL-Constructor\AdAndLifeNewspaperConstructor\AdAndLifeNewspaperConstructor\AdAndLifeNewspaperConstructor\IndesignExport\AdAndLifeInDesignScript.tt"
 if (!IsBorder(cl) && !IsFilled(cl)) { 
            
            #line default
            #line hidden
            this.Write("\r\n    With curParagraph\r\n\t\t.ClearOverrides\r\n\t\t.AppliedParagraphStyle = \"");
            
            #line 174 "C:\MikeProjects\AAL\AAL-Constructor\AdAndLifeNewspaperConstructor\AdAndLifeNewspaperConstructor\AdAndLifeNewspaperConstructor\IndesignExport\AdAndLifeInDesignScript.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(IsBold(cl) ? "__classifiedTextBold" : "__classifiedText"));
            
            #line default
            #line hidden
            this.Write("\"\r\n\t\t");
            
            #line 175 "C:\MikeProjects\AAL\AAL-Constructor\AdAndLifeNewspaperConstructor\AdAndLifeNewspaperConstructor\AdAndLifeNewspaperConstructor\IndesignExport\AdAndLifeInDesignScript.tt"
if (IsCentered(cl)) { 
            
            #line default
            #line hidden
            this.Write(" \r\n\t\t.Justification = idJustification.idCenterAlign \r\n\t\t");
            
            #line 177 "C:\MikeProjects\AAL\AAL-Constructor\AdAndLifeNewspaperConstructor\AdAndLifeNewspaperConstructor\AdAndLifeNewspaperConstructor\IndesignExport\AdAndLifeInDesignScript.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\t\t.Contents = \"");
            
            #line 178 "C:\MikeProjects\AAL\AAL-Constructor\AdAndLifeNewspaperConstructor\AdAndLifeNewspaperConstructor\AdAndLifeNewspaperConstructor\IndesignExport\AdAndLifeInDesignScript.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(txt));
            
            #line default
            #line hidden
            this.Write("\" & Chr(13)\r\n    End With\r\n    ");
            
            #line 180 "C:\MikeProjects\AAL\AAL-Constructor\AdAndLifeNewspaperConstructor\AdAndLifeNewspaperConstructor\AdAndLifeNewspaperConstructor\IndesignExport\AdAndLifeInDesignScript.tt"
 toDrawLine = true; 
            
            #line default
            #line hidden
            this.Write("\t\t\t");
            
            #line 181 "C:\MikeProjects\AAL\AAL-Constructor\AdAndLifeNewspaperConstructor\AdAndLifeNewspaperConstructor\AdAndLifeNewspaperConstructor\IndesignExport\AdAndLifeInDesignScript.tt"
 } else { 
            
            #line default
            #line hidden
            this.Write("\r\n    Set tbl = curParagraph.Tables.Add(idAtEnd)\r\n    With tbl\r\n\t    .ColumnCount" +
                    " = 1\r\n\t\t.BodyRowCount = 1\r\n\t\tSet cll = .Cells(1)\r\n    End With\r\n\r\n    With cll\r\n" +
                    "\t    .ClearCellStyleOverrides\r\n\t    .width = ");
            
            #line 192 "C:\MikeProjects\AAL\AAL-Constructor\AdAndLifeNewspaperConstructor\AdAndLifeNewspaperConstructor\AdAndLifeNewspaperConstructor\IndesignExport\AdAndLifeInDesignScript.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(classifiedColumnWidth));
            
            #line default
            #line hidden
            this.Write("\r\n\t\t");
            
            #line 193 "C:\MikeProjects\AAL\AAL-Constructor\AdAndLifeNewspaperConstructor\AdAndLifeNewspaperConstructor\AdAndLifeNewspaperConstructor\IndesignExport\AdAndLifeInDesignScript.tt"
 if (IsFilled(cl)) { 
            
            #line default
            #line hidden
            this.Write("        .AppliedCellStyle = \"__classifiedFilledBox\"\r\n        .InsertionPoints.Las" +
                    "tItem.AppliedParagraphStyle = \"__classifiedFilledBoxText\"\r\n\t\t");
            
            #line 196 "C:\MikeProjects\AAL\AAL-Constructor\AdAndLifeNewspaperConstructor\AdAndLifeNewspaperConstructor\AdAndLifeNewspaperConstructor\IndesignExport\AdAndLifeInDesignScript.tt"
 } else if (IsBorder(cl)) { 
            
            #line default
            #line hidden
            this.Write("        .AppliedCellStyle = \"__classifiedBox\"\r\n        .InsertionPoints.LastItem." +
                    "AppliedParagraphStyle = \"");
            
            #line 198 "C:\MikeProjects\AAL\AAL-Constructor\AdAndLifeNewspaperConstructor\AdAndLifeNewspaperConstructor\AdAndLifeNewspaperConstructor\IndesignExport\AdAndLifeInDesignScript.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(IsBold(cl) ? "__classifiedTextBold" : "__classifiedText"));
            
            #line default
            #line hidden
            this.Write("\"\r\n\t\t");
            
            #line 199 "C:\MikeProjects\AAL\AAL-Constructor\AdAndLifeNewspaperConstructor\AdAndLifeNewspaperConstructor\AdAndLifeNewspaperConstructor\IndesignExport\AdAndLifeInDesignScript.tt"
 } else 
			System.Diagnostics.Debugger.Break(); // should never happen
		
            
            #line default
            #line hidden
            this.Write("\t\t");
            
            #line 202 "C:\MikeProjects\AAL\AAL-Constructor\AdAndLifeNewspaperConstructor\AdAndLifeNewspaperConstructor\AdAndLifeNewspaperConstructor\IndesignExport\AdAndLifeInDesignScript.tt"
if (IsCentered(cl)) { 
            
            #line default
            #line hidden
            this.Write("\t\t.InsertionPoints.LastItem.Justification = idJustification.idCenterAlign \r\n\t\t");
            
            #line 204 "C:\MikeProjects\AAL\AAL-Constructor\AdAndLifeNewspaperConstructor\AdAndLifeNewspaperConstructor\AdAndLifeNewspaperConstructor\IndesignExport\AdAndLifeInDesignScript.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\t\t.Contents = \"");
            
            #line 205 "C:\MikeProjects\AAL\AAL-Constructor\AdAndLifeNewspaperConstructor\AdAndLifeNewspaperConstructor\AdAndLifeNewspaperConstructor\IndesignExport\AdAndLifeInDesignScript.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(txt));
            
            #line default
            #line hidden
            this.Write("\"\r\n    End With\r\n\r\n\t");
            
            #line 208 "C:\MikeProjects\AAL\AAL-Constructor\AdAndLifeNewspaperConstructor\AdAndLifeNewspaperConstructor\AdAndLifeNewspaperConstructor\IndesignExport\AdAndLifeInDesignScript.tt"
 } // if
		
            
            #line default
            #line hidden
            this.Write("\r\n    With flowStory.Paragraphs(flowStory.Paragraphs.Count - 1)\r\n        .Select\r" +
                    "\n        .SpaceAfter = 0.125\r\n        ");
            
            #line 214 "C:\MikeProjects\AAL\AAL-Constructor\AdAndLifeNewspaperConstructor\AdAndLifeNewspaperConstructor\AdAndLifeNewspaperConstructor\IndesignExport\AdAndLifeInDesignScript.tt"
 if (toDrawLine) { 
            
            #line default
            #line hidden
            this.Write("        .RuleBelowType = strStyle\r\n        .RuleBelowOffset = 0.0625\r\n        .Ru" +
                    "leBelow = True\r\n        ");
            
            #line 218 "C:\MikeProjects\AAL\AAL-Constructor\AdAndLifeNewspaperConstructor\AdAndLifeNewspaperConstructor\AdAndLifeNewspaperConstructor\IndesignExport\AdAndLifeInDesignScript.tt"
 } 
            
            #line default
            #line hidden
            this.Write("    End With\r\n    ");
            
            #line 220 "C:\MikeProjects\AAL\AAL-Constructor\AdAndLifeNewspaperConstructor\AdAndLifeNewspaperConstructor\AdAndLifeNewspaperConstructor\IndesignExport\AdAndLifeInDesignScript.tt"
 toDrawLine = false; 
            
            #line default
            #line hidden
            this.Write("    flowStory.InsertionPoints.LastItem.Contents = Chr(13)\r\n\r\n");
            
            #line 223 "C:\MikeProjects\AAL\AAL-Constructor\AdAndLifeNewspaperConstructor\AdAndLifeNewspaperConstructor\AdAndLifeNewspaperConstructor\IndesignExport\AdAndLifeInDesignScript.tt"

       } // foreach


            
            #line default
            #line hidden
            this.Write(@"
  ' If Len(flowStory.Paragraphs.LastItem.Contents) = 1 Then flowStory.Paragraphs.LastItem.Delete
  ' If Len(flowStory.Paragraphs.LastItem.Contents) = 1 Then flowStory.Paragraphs.LastItem.Delete
  ' FormatTags flowStory
 '  ClassifiedFitting flowStory
");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    public class AdAndLifeInDesignScriptBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        public System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
